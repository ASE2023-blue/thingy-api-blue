/**
 * All utilities functions used in the application.
 * @module utils
 */
const AppError = require('./classes/AppError');

const { Point } = require('@influxdata/influxdb-client');
const { INFLUX } = require('./globals');

const crypto = require('crypto');
const jwt = require('jsonwebtoken');
const mongoose = require('mongoose');
const { TWILIO_CLIENT } = require('./globals');
const { Server } = require('http');
const multer = require('multer');

const {
  env: { TWILIO_PHONE_NUMBER },
} = process;

/**
 * Function used to handle mongoose invalid requests generating CastError.
 * @param {mongoose.Error} error The error generated by the invalid operation on the database.
 * @returns {AppError} A CastError AppError object with a 400 status code.
 */
exports.handleCastErrorDB = error => {
  const message = `Invalid ${error.path}: ${error.value}`;
  return new AppError(message, 400);
};

/**
 * Function used to handle mongoose duplicate field database errors.
 * @param {mongoose.Error} error The error generated by the invalid operation on the database.
 * @returns {AppError} A duplicate field AppError object with a 400 status code.
 */
exports.handleDuplicateFieldsDB = error => {
  const [value] = error.errmsg.match(/(["'])(?:(?=(\\?))\2.)*?\1/);

  const message = `Duplicate field value: ${value}. Please use another value!`;

  return new AppError(message, 400);
};

/**
 * Function used to handle mongoose validation database errors.
 * @param {mongoose.Error} error The error generated by the invalid operation on the database.
 * @returns {AppError} A validation AppError object with a 400 status code.
 */
exports.handleValidationErrorDB = error => {
  const message = `Invalid input data.`;
  const errors = Object.entries(error.errors).map(([key, value]) => ({
    [key]: value.message,
  }));

  const appError = new AppError(message, 400);
  appError.fields = errors;
  return appError;
};

/**
 * Function used to handle requests containing an invalid JWT authentication token.
 * @returns {AppError} An invalid JWT AppError object with a 401 status code.
 */
exports.handleJWTError = () => new AppError('Invalid token!', 401);

/**
 * Function used to handler requests containing an invalid expired JWT authentication token.
 * @returns {AppError} An invalid JWT AppError object with a 401 status code.
 */
exports.handleJWTExpiredError = () =>
  new AppError('Your token has expired. Please log in again!', 401);

/**
 * Function used to handle the respone object returned to the client when the server is in dev mode.
 * @param {Error} error The error object for which we want to send a response.
 * @param {import('express').Response} res The response object of the Express framework, used to handle the response we will give back to the end user.
 */
exports.sendErrorDev = (error, res) => {
  const { statusCode, status, message, stack } = error;
  res.status(statusCode).json({ status, error, message, stack });
};

/**
 * Function used to handle the response object returned to the client when the server is in prod mode.
 * @param {Error} err the error object for which we want to send a response.
 * @param {import('express').Response} res the response object of the Express framework, used to handle the response we will give back to the end user.
 */
exports.sendErrorProd = (err, res) => {
  if (err.isOperational) {
    const { statusCode, status, message, fields } = err;
    res.status(statusCode).json({ status, message, fields });
    return;
  }
  // Log error
  console.error('ERROR: ', err);

  // Send generic message
  res
    .status(500)
    .json({ status: 'error', message: 'Something went wrong. Try Again!' });
};

/**
 * Function used to gracefully shut down the server in the case of a fatal unhandled error happening on it.
 * @param {Server} server The HTTP server we want to gracefully shut down.
 * @param {mongoose.Connection} dbConnection The opened mongoose db connection we want to shut down simultaneously as the server.
 * @param {string} message The error message we want to display when we shut down the server.
 * @param {Error} error The unhandled error that has caused the server to crash.
 */
exports.shutDownAll = async (server, dbConnection, message, error) => {
  try {
    console.log(message);
    if (error) console.error(error.name, error.message);
    if (dbConnection) {
      console.log('Close DB connection.');
      await dbConnection.close();
    }

    if (server)
      server.close(() => {
        console.log('Close server.');
        process.exit(1);
      });
    else process.exit(1);
  } catch (err) {
    console.error(err.name, err.message);
    process.exit(1);
  }
};

/**
 * Function used to handle errors generated in controllers function and redirect them to the Error handling NextFunction in the case where it happens.
 * @param {Function} fn the async controller function for which we want to catch the errors and handle the response in the route.
 */
exports.catchAsync = fn => (req, res, next) => {
  fn(req, res, next).catch(err => next(err));
};

/**
 * Publishes a message to an MQTT topic and sends a response.
 * @param {import('mqtt').Client} mqttClient - The MQTT client to publish the message.
 * @param {string} topic - The MQTT topic to which the message will be published.
 * @param {string} message - The message to publish.
 * @param {import('express').Response} res - The response object to send a status back to the client.
 * @function
 */
exports.publishToMQTT = (mqttClient, topic, message, res) => {
  mqttClient.publish(topic, message, error => {
    if (error) {
      console.error(`Error publishing message: ${message} -> ${error}`);
    } else {
      console.log('Successfully published the following message: ', message);
      res.status(200).json({
        status: 'success',
        data: { message },
      });
    }
  });
};

/**
 * Sends query results from InfluxDB to the client.
 * @param {import('express').Response} res - The response object to send data back to the client.
 * @param {string} fluxQuery - The Flux query to execute.
 * @function
 */
exports.sendQueryResults = (res, fluxQuery) => {
  const result = [];

  INFLUX.queryClient.queryRows(fluxQuery, {
    next: (row, tableMeta) => {
      const rowObject = tableMeta.toObject(row);
      result.push({
        device: rowObject.device,
        measurement: rowObject._measurement,
        property: rowObject._field,
        value: rowObject._value,
        time: rowObject._time,
      });
    },
    error: error => {
      res.status(500).json({
        status: 'error',
        message: `An error occurred while fetching data: ${error}`,
      });
    },
    complete: () => {
      res.status(200).json({
        status: 'success',
        data: result,
      });
    },
  });
};

/**
 * Retrieves query rows from InfluxDB as a promise.
 * @param {string} fluxQuery - The Flux query to execute.
 * @returns {Promise<Array>} A promise that resolves to an array of query results.
 * @function
 */
exports.getQueryRows = fluxQuery => {
  return new Promise((resolve, reject) => {
    let result = [];

    INFLUX.queryClient.queryRows(fluxQuery, {
      next: (row, tableMeta) => {
        const rowObject = tableMeta.toObject(row);
        result.push(rowObject);
      },
      error: error => {
        reject(`An error occurred while fetching data: ${error}`);
      },
      complete: () => {
        resolve(result);
      },
    });
  });
};

/**
 * Adds a float property to the InfluxDB with the tag corresponding to the deviceId.
 * @param {Object} message - The MQTT message containing the property information.
 * @function
 */
exports.addFloatProperty = async (deviceId, message) => {
  let point = new Point('thingy91')
    .tag('device', deviceId)
    .floatField(message.appId, message.data)
    .timestamp(new Date().getTime());

  INFLUX.writeClient.writePoint(point);
};

/**
 * Adds an integer property to the InfluxDB with the tag corresponding to the deviceId.
 * @param {Object} message - The MQTT message containing the property information.
 * @function
 */
exports.addIntegerProperty = async (deviceId, message) => {
  if (message.data == '1') {
    let point = new Point('thingy91')
      .tag('device', deviceId)
      .intField(message.appId, message.data)
      .timestamp(new Date().getTime());

    INFLUX.writeClient.writePoint(point);
    console.log(
      `Added to tag ${deviceId} the following data: `,
      JSON.stringify(message, null, 2),
    );
  }
};

/**
 * Constructs a basic Flux query for retrieving property data from InfluxDB.
 * @param {string} bucket - The InfluxDB bucket.
 * @param {string} interval - The time interval for the query.
 * @param {string} measurement - The measurement (e.g., 'thingy91').
 * @param {string} deviceId - The device ID to filter data by.
 * @param {string} field - The field (e.g., 'TEMP').
 * @returns {string} The constructed Flux query.
 * @function
 */
exports.constructBasicPropertyQuery = (
  bucket,
  interval,
  measurement,
  deviceId,
  field,
) => {
  return `from(bucket: "${bucket}")
  |> range(start: -${interval})
  |> filter(fn: (r) => r._measurement == "${measurement}" and r._field == "${field}" and r.device == "${deviceId}")`;
};

/**
 * Constructs a statistical Flux query for property data from InfluxDB.
 * @param {string} bucket - The InfluxDB bucket.
 * @param {string} interval - The time interval for the query.
 * @param {string} measurement - The measurement (e.g., 'thingy91').
 * @param {string} deviceId - The device ID to filter data by.
 * @param {string} field - The field (e.g., 'TEMP').
 * @param {string} statistic - The statistical function (e.g., 'mean' 'stddev').
 * @returns {string} The constructed Flux query.
 * @function
 */
exports.constructStatisticalQueryOnProperty = (
  bucket,
  interval,
  measurement,
  deviceId,
  field,
  statistic,
) => {
  return `from(bucket: "${bucket}")
  |> range(start: -${interval})
  |> filter(fn: (r) => r._measurement == "${measurement}" and r._field == "${field}" and r.device == "${deviceId}")
  |> group(columns: ["_field"])
  |> ${statistic}()`;
};

/**
 * Function used to generate a jwt authentication for an user.
 * @param {import('express').Request} req The request object of the Express framework, used to handle the request sent by the client.
 * @param {string} id the id of the user for whom we want to create a jwt authentication token.
 * @returns {Object} an object containing the response object that will be sent to the user and the cookie options for setting the jwt as httpOnly cookie.
 */
exports.createSendToken = (req, id) => {
  const token = jwt.sign({ id }, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRES_IN,
  });

  const cookieOptions = {
    expires: new Date(
      Date.now() + process.env.JWT_COOKIE_EXPIRES_IN * 60 * 600 * 1000,
    ),
    httpOnly: true,
    sameSite: 'none',
    secure: req.secure || req.header('x-forwarded-proto') === 'https',
    domain: req.get('origin'),
  };

  return { resObject: { status: 'success', token }, cookieOptions };
};

/**
 * Function used to send a SMS to an user.
 * @param {User} user The user to whom we want to send a SMS.
 */
exports.sendPinCode = async user => {
  const [pinCode, pinCodeExpires] = user.createPinCode();
  await user.save({ validateBeforeSave: false });
  TWILIO_CLIENT.messages.create({
    from: TWILIO_PHONE_NUMBER,
    to: user.phone,
    body: `${pinCode}`,
  });

  return pinCodeExpires;
};

/**
 * Function used to generate a random token link that will be sent among an email.
 * @returns {string[]} The token that will be contained in the link and its hashed version that will be stored in the database.
 */
exports.createLinkToken = () => {
  const token = crypto.randomBytes(32).toString('hex');

  return [token, crypto.createHash('sha256').update(token).digest('hex')];
};

/**
 * Multer object used to store files into the file system when they are sent in a form.
 * @type {import('multer').Multer}
 */
exports.uploadImage = multer({
  storage: multer.memoryStorage(),
  fileFilter: (req, file, callback) => {
    const { mimetype } = file;
    if (mimetype.startsWith('image')) {
      callback(null, true);
      return;
    }
    callback(
      new AppError('Not an image!Please upload only images.', 400),
      false,
    );
  },
});
